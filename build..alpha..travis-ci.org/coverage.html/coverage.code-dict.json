{"/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/test.js":"/* istanbul instrument in package npmtest_ember_cli_page_object */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/lib.npmtest_ember_cli_page_object.js":"/* istanbul instrument in package npmtest_ember_cli_page_object */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_cli_page_object = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_cli_page_object = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-cli-page-object && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_cli_page_object */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_cli_page_object\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_cli_page_object.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_cli_page_object.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_cli_page_object.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_cli_page_object.__dirname + '/lib.npmtest_ember_cli_page_object.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-cli-page-object',\n\n  options: {\n    nodeAssets: {\n      ceibo: function() {\n        return {\n          enabled: this._shouldIncludeFiles(),\n          import: ['index.js']\n        };\n      }\n    }\n  },\n\n  included: function(app) {\n    // see: https://github.com/ember-cli/ember-cli/issues/3718\n    if (typeof app.import !== 'function' && app.app) {\n      app = app.app;\n    }\n\n    this.app = app;\n\n    this._super.included.apply(this, arguments);\n  },\n\n  treeFor: function(/*name*/) {\n    if (!this._shouldIncludeFiles()) {\n      return;\n    }\n\n    return this._super.treeFor.apply(this, arguments);\n  },\n\n  _shouldIncludeFiles: function() {\n    return !!this.app.tests;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/extend.js":"export { findElement } from './-private/extend/find-element';\nexport { findElementWithAssert } from './-private/extend/find-element-with-assert';\nexport { buildSelector, getContext, fullScope } from './-private/helpers';\nexport { register as registerExecutionContext } from './-private/execution_context';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/better-errors.js":"import Ember from 'ember';\nimport Ceibo from 'ceibo';\n\nexport function throwBetterError(node, key, selector) {\n  let path = [key];\n  let current;\n\n  for (current = node; current; current = Ceibo.parent(current)) {\n    path.unshift(Ceibo.meta(current).key);\n  }\n\n  path[0] = 'page';\n\n  let msg = `Element not found.\n\nPageObject: '${path.join('.')}'\n  Selector: '${selector}'\n`;\n\n  throw new Ember.Error(msg);\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/context.js":"/**\n * @public\n *\n * Render a component's template in the context of a test.\n *\n * Throws an error if a test's context has not been set on the page.\n *\n * Returns the page object, which allows for method chaining.\n *\n * @example\n *\n * page.setContext(this)\n *   .render(hbs`{{my-component}}`)\n *   .clickOnText('Hi!');\n *\n * @param {Object} template - A compiled component template\n * @return {PageObject} - the page object\n */\nexport function render(template) {\n  if (!this.context) {\n    let message = 'You must set a context on the page object before calling calling `render()`';\n    let error = new Error(message);\n\n    throw error;\n  }\n\n  this.context.render(template);\n\n  return this;\n}\n\n/**\n * @public\n *\n * Sets the page's test context.\n *\n * Returns the page object, which allows for method chaining.\n *\n * @example\n *\n * page.setContext(this)\n *   .render(hbs`{{my-component}}`)\n *   .clickOnText('Hi!');\n *\n * @param {Object} context - A component integration test's `this` context\n * @return {PageObject} - the page object\n */\nexport function setContext(context) {\n  if (context) {\n    this.context = context;\n  }\n\n  return this;\n}\n\n/**\n * @public\n *\n * Unsets the page's test context.\n *\n * Useful in a component test's `afterEach()` hook, to make sure the context has been cleared after each test.\n *\n * @example\n *\n * page.removeContext();\n *\n * @return {PageObject} - the page object\n */\nexport function removeContext() {\n  if (this.context) {\n    delete this.context;\n  }\n\n  return this;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/create.js":"import Ceibo from 'ceibo';\nimport { render, setContext, removeContext } from './context';\nimport { assign } from './helpers';\nimport { visitable } from './properties/visitable';\nimport dsl from './dsl';\n\n// See https://github.com/san650/ceibo#examples for more info on how Ceibo\n// builders work.\nfunction buildObject(node, blueprintKey, blueprint, defaultBuilder) {\n  blueprint = assign(assign({}, dsl), blueprint);\n\n  return defaultBuilder(node, blueprintKey, blueprint, defaultBuilder);\n}\n\n/**\n * Creates a new PageObject.\n *\n * By default, the resulting PageObject will respond to:\n *\n * - **Actions**: click, clickOn, fillIn, select\n * - **Predicates**: contains, isHidden, isVisible\n * - **Queries**: text\n *\n * `definition` can include a key `context`, which is an\n * optional integration test `this` context.\n *\n * If a context is passed, it is used by actions, queries, etc.,\n * as the `this` in `this.$()`.\n *\n * If no context is passed, the global Ember acceptence test\n * helpers are used.\n *\n * @example\n *\n * // <div class=\"title\">My title</div>\n *\n * import PageObject, { text } from 'ember-cli-page-object';\n *\n * const page = PageObject.create({\n *   title: text('.title')\n * });\n *\n * assert.equal(page.title, 'My title');\n *\n * @example\n *\n * // <div id=\"my-page\">\n * //   My super text\n * //   <button>Press Me</button>\n * // </div>\n *\n * const page = PageObject.create({\n *   scope: '#my-page'\n * });\n *\n * assert.equal(page.text, 'My super text');\n * assert.ok(page.contains('super'));\n * assert.ok(page.isVisible);\n * assert.notOk(page.isHidden);\n * assert.equal(page.value, 'my input value');\n *\n * // clicks div#my-page\n * page.click();\n *\n * // clicks button\n * page.clickOn('Press Me');\n *\n * // fills an input\n * page.fillIn('name', 'John Doe');\n *\n * // selects an option\n * page.select('country', 'Uruguay');\n *\n * @example Defining path\n *\n * const usersPage = PageObject.create('/users');\n *\n * // visits user page\n * usersPage.visit();\n *\n * const userTasksPage = PageObject.create('/users/tasks', {\n *  tasks: collection({\n *    itemScope: '.tasks li',\n *    item: {}\n *  });\n * });\n *\n * // get user's tasks\n * userTasksPage.visit();\n * userTasksPage.tasks().count\n *\n * @public\n *\n * @param {Object} definition - PageObject definition\n * @param {Object} [definition.context] - A test's `this` context\n * @param {Object} options - [private] Ceibo options. Do not use!\n * @return {PageObject}\n */\nexport function create(definitionOrUrl, definitionOrOptions, optionsOrNothing) {\n  let definition;\n  let url;\n  let options;\n\n  if (typeof (definitionOrUrl) === 'string') {\n    url = definitionOrUrl;\n    definition = definitionOrOptions || {};\n    options = optionsOrNothing || {};\n  } else {\n    url = false;\n    definition = definitionOrUrl;\n    options = definitionOrOptions || {};\n  }\n\n  definition = assign({}, definition);\n\n  if (url) {\n    definition.visit = visitable(url);\n  }\n\n  let { context } = definition;\n  delete definition.context;\n\n  let builder = {\n    object: buildObject\n  };\n\n  let page = Ceibo.create(definition, assign({ builder }, options));\n\n  if (page) {\n    page.render = render;\n    page.setContext = setContext;\n    page.removeContext = removeContext;\n\n    page.setContext(context);\n  }\n\n  return page;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/dsl.js":"import { text } from './properties/text';\nimport { isVisible } from './properties/is-visible';\nimport { isHidden } from './properties/is-hidden';\nimport { contains } from './properties/contains';\nimport { clickOnText } from './properties/click-on-text';\nimport { clickable } from './properties/clickable';\nimport { fillable } from './properties/fillable';\nimport { value } from './properties/value';\nimport { as } from './properties/as';\n\nconst thenDescriptor = {\n  isDescriptor: true,\n  value() {\n    /* global wait */\n    return wait().then(...arguments);\n  }\n};\n\nconst dsl = {\n  contains: contains(),\n  isHidden: isHidden(),\n  isVisible: isVisible(),\n  text: text(),\n  value: value(),\n  clickOn: clickOnText(),\n  click: clickable(),\n  fillIn: fillable(),\n  select: fillable(),\n  then: thenDescriptor,\n  as\n};\n\nexport default dsl;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/execution_context.js":"import { getContext } from './helpers';\nimport AcceptanceExecutionContext from './execution_context/acceptance';\nimport IntegrationExecutionContext from './execution_context/integration';\n\nconst executioncontexts = {\n  acceptance: AcceptanceExecutionContext,\n  integration: IntegrationExecutionContext\n};\n\n/*\n * @private\n */\nexport function getExecutionContext(pageObjectNode) {\n  let testContext = getContext(pageObjectNode);\n  let context = testContext ? 'integration' : 'acceptance';\n\n  return new executioncontexts[context](pageObjectNode, testContext);\n}\n\n/*\n * @private\n */\nexport function register(type, definition) {\n  executioncontexts[type] = definition;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/helpers.js":"import Ember from 'ember';\nimport Ceibo from 'ceibo';\n\nconst { $, assert, isPresent } = Ember;\n\nclass Selector {\n  constructor(node, scope, selector, filters) {\n    this.targetNode = node;\n    this.targetScope = scope || '';\n    this.targetSelector = selector || '';\n    this.targetFilters = filters;\n  }\n\n  toString() {\n    let scope;\n    let filters;\n\n    if (this.targetFilters.resetScope) {\n      scope = this.targetScope;\n    } else {\n      scope = this.calculateScope(this.targetNode, this.targetScope);\n    }\n\n    filters = this.calculateFilters(this.targetFilters);\n\n    let selector = $.trim(`${scope} ${this.targetSelector}${filters}`);\n\n    if (!selector.length) {\n      // When an empty selector is resolved take the first direct child of the\n      // testing container.\n      selector = ':first';\n    }\n\n    return selector;\n  }\n\n  calculateFilters() {\n    let filters = [];\n\n    if (this.targetFilters.visible) {\n      filters.push(`:visible`);\n    }\n\n    if (this.targetFilters.contains) {\n      filters.push(`:contains(\"${this.targetFilters.contains}\")`);\n    }\n\n    if (typeof this.targetFilters.at === 'number') {\n      filters.push(`:eq(${this.targetFilters.at})`);\n    } else if (this.targetFilters.last) {\n      filters.push(':last');\n    }\n\n    return filters.join('');\n  }\n\n  calculateScope(node, targetScope) {\n    let scopes = this.getScopes(node);\n\n    scopes.reverse();\n    scopes.push(targetScope);\n\n    return $.trim(scopes.join(' '));\n  }\n\n  getScopes(node) {\n    let scopes = [];\n\n    if (node.scope) {\n      scopes.push(node.scope);\n    }\n\n    if (!node.resetScope && Ceibo.parent(node)) {\n      scopes = scopes.concat(this.calculateScope(Ceibo.parent(node)));\n    }\n\n    return scopes;\n  }\n}\n\nexport function guardMultiple(items, selector, supportMultiple) {\n  assert(\n    `\"${selector}\" matched more than one element. If this is not an error use { multiple: true }`,\n    supportMultiple || items.length <= 1\n  );\n}\n\n/**\n * @public\n *\n * Builds a CSS selector from a target selector and a PageObject or a node in a PageObject, along with optional parameters.\n *\n * @example\n *\n * const component = PageObject.create({ scope: '.component'});\n *\n * buildSelector(component, '.my-element');\n * // returns '.component .my-element'\n *\n * @example\n *\n * const page = PageObject.create({});\n *\n * buildSelector(page, '.my-element', { at: 0 });\n * // returns '.my-element:eq(0)'\n *\n * @example\n *\n * const page = PageObject.create({});\n *\n * buildSelector(page, '.my-element', { contains: \"Example\" });\n * // returns \".my-element :contains('Example')\"\n *\n * @example\n *\n * const page = PageObject.create({});\n *\n * buildSelector(page, '.my-element', { last: true });\n * // returns '.my-element:last'\n *\n * @param {Ceibo} node - Node of the tree\n * @param {string} targetSelector - CSS selector\n * @param {Object} options - Additional options\n * @param {boolean} options.resetScope - Do not use inherited scope\n * @param {string} options.contains - Filter by using :contains('foo') pseudo-class\n * @param {number} options.at - Filter by index using :eq(x) pseudo-class\n * @param {boolean} options.last - Filter by using :last pseudo-class\n * @param {boolean} options.visible - Filter by using :visible pseudo-class\n * @return {string} Fully qualified selector\n */\nexport function buildSelector(node, targetSelector, options) {\n  return (new Selector(node, options.scope, targetSelector, options)).toString();\n}\n\n/**\n * @private\n *\n * Trim whitespaces at both ends and normalize whitespaces inside `text`\n *\n * Due to variations in the HTML parsers in different browsers, the text\n * returned may vary in newlines and other white space.\n *\n * @see http://api.jquery.com/text/\n */\nexport function normalizeText(text) {\n  return $.trim(text).replace(/\\n/g, ' ').replace(/\\s\\s*/g, ' ');\n}\n\nexport function every(jqArray, cb) {\n  let arr = jqArray.get();\n\n  return Ember.A(arr).every(function(element) {\n    return cb($(element));\n  });\n}\n\nexport function map(jqArray, cb) {\n  let arr = jqArray.get();\n\n  return Ember.A(arr).map(function(element) {\n    return cb($(element));\n  });\n}\n\n/**\n * @private\n *\n * Return the root of a node's tree\n *\n * @param {Ceibo} node - Node of the tree\n * @return {Ceibo} node - Root node of the tree\n */\nfunction getRoot(node) {\n  let parent = Ceibo.parent(node);\n  let root = node;\n\n  while (parent) {\n    root = parent;\n    parent = Ceibo.parent(parent);\n  }\n\n  return root;\n}\n\n/**\n * @public\n *\n * Return a test context if one was provided during `create()`\n *\n * @param {Ceibo} node - Node of the tree\n * @return {?Object} The test's `this` context, or null\n */\nexport function getContext(node) {\n  let root = getRoot(node);\n  let { context } = root;\n\n  if (typeof context === 'object' && typeof context.$ === 'function') {\n    return context;\n  } else {\n    return null;\n  }\n}\n\nfunction getAllValuesForProperty(node, property) {\n  let iterator = node;\n  let values = [];\n\n  while (Ember.isPresent(iterator)) {\n    if (Ember.isPresent(iterator[property])) {\n      values.push(iterator[property]);\n    }\n\n    iterator = Ceibo.parent(iterator);\n  }\n\n  return values;\n}\n\n/**\n * @public\n *\n * Return full scope of node (includes all ancestors scopes)\n *\n * @param {Ceibo} node - Node of the tree\n * @return {?Object} Full scope of node\n */\nexport function fullScope(node) {\n  let scopes = getAllValuesForProperty(node, 'scope');\n\n  return scopes.reverse().join(' ');\n}\n\n/**\n * @public\n *\n * Returns the value of property defined on the closest ancestor of given\n * node.\n *\n * @param {Ceibo} node - Node of the tree\n * @param {string} property - Property to look for\n * @return {?Object} The value of property on closest node to the given node\n */\nexport function findClosestValue(node, property) {\n  if (isPresent(node[property])) {\n    return node[property];\n  }\n\n  let parent = Ceibo.parent(node);\n\n  if (isPresent(parent)) {\n    return findClosestValue(parent, property);\n  }\n}\n\nexport const assign = Ember.assign || Ember.merge;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/execution_context/acceptance.js":"import {\n  guardMultiple,\n  buildSelector,\n  findClosestValue\n} from '../helpers';\nimport { throwBetterError } from '../better-errors';\n\nexport default function AcceptanceExecutionContext(pageObjectNode) {\n  this.pageObjectNode = pageObjectNode;\n}\n\nAcceptanceExecutionContext.prototype = {\n  run(cb) {\n    return cb(this);\n  },\n\n  runAsync(cb) {\n    /* global wait */\n    wait().then(() => {\n      cb(this);\n    });\n\n    return this.pageObjectNode;\n  },\n\n  visit(path) {\n    /* global visit */\n    visit(path);\n  },\n\n  click(selector, container) {\n    /* global click */\n    click(selector, container);\n  },\n\n  fillIn(selector, container, text) {\n    /* global fillIn */\n    if (container) {\n      fillIn(selector, container, text);\n    } else {\n      fillIn(selector, text);\n    }\n  },\n\n  triggerEvent(selector, container, eventName, eventOptions) {\n    /* global triggerEvent */\n    triggerEvent(selector, container, eventName, eventOptions);\n  },\n\n  assertElementExists(selector, options) {\n    /* global find */\n    let result = find(selector, options.testContainer || findClosestValue(this.pageObjectNode, 'testContainer'));\n\n    if (result.length === 0) {\n      throwBetterError(this.pageObjectNode, options.pageObjectKey, selector);\n    }\n  },\n\n  find(selector, options) {\n    let result;\n\n    selector = buildSelector(this.pageObjectNode, selector, options);\n\n    /* global find */\n    result = find(selector, options.testContainer || findClosestValue(this.pageObjectNode, 'testContainer'));\n\n    guardMultiple(result, selector, options.multiple);\n\n    return result;\n  },\n\n  findWithAssert(selector, options) {\n    let result;\n\n    selector = buildSelector(this.pageObjectNode, selector, options);\n\n    /* global find */\n    result = find(selector, options.testContainer || findClosestValue(this.pageObjectNode, 'testContainer'));\n\n    if (result.length === 0) {\n      throwBetterError(this.pageObjectNode, options.pageObjectKey, selector);\n    }\n\n    guardMultiple(result, selector, options.multiple);\n\n    return result;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/execution_context/integration.js":"import Ember from 'ember';\nimport {\n  guardMultiple,\n  buildSelector,\n  findClosestValue\n} from '../helpers';\nimport { throwBetterError } from '../better-errors';\n\nconst { $, run } = Ember;\n\nexport default function IntegrationExecutionContext(pageObjectNode, testContext) {\n  this.pageObjectNode = pageObjectNode;\n  this.testContext = testContext;\n}\n\nIntegrationExecutionContext.prototype = {\n  run(cb) {\n    return cb(this);\n  },\n\n  runAsync(cb) {\n    run(() => {\n      cb(this);\n    });\n\n    return this.pageObjectNode;\n  },\n\n  // Do nothing in integration test\n  visit: $.noop,\n\n  click(selector, container) {\n    this.$(selector, container).click();\n  },\n\n  fillIn(selector, container, text) {\n    let element = this.$(selector, container);\n\n    element.val(text);\n    element.trigger('input');\n    element.change();\n  },\n\n  $(selector, container) {\n    if (container) {\n      return $(selector, container);\n    } else {\n      return this.testContext.$(selector);\n    }\n  },\n\n  triggerEvent(selector, container, eventName, eventOptions) {\n    let event = $.Event(eventName, eventOptions);\n\n    if (container) {\n      $(selector, container).trigger(event);\n    } else {\n      this.testContext.$(selector).trigger(event);\n    }\n  },\n\n  assertElementExists(selector, options) {\n    let result;\n    let container = options.testContainer || findClosestValue(this.pageObjectNode, 'testContainer');\n\n    if (container) {\n      result = $(selector, container);\n    } else {\n      result = this.testContext.$(selector);\n    }\n\n    if (result.length === 0) {\n      throwBetterError(this.pageObjectNode, options.pageObjectKey, selector);\n    }\n  },\n\n  find(selector, options) {\n    let result;\n    let container = options.testContainer || findClosestValue(this.pageObjectNode, 'testContainer');\n\n    selector = buildSelector(this.pageObjectNode, selector, options);\n\n    if (container) {\n      result = $(selector, container);\n    } else {\n      result = this.testContext.$(selector);\n    }\n\n    guardMultiple(result, selector, options.multiple);\n\n    return result;\n  },\n\n  findWithAssert(selector, options) {\n    let result;\n    let container = options.testContainer || findClosestValue(this.pageObjectNode, 'testContainer');\n\n    selector = buildSelector(this.pageObjectNode, selector, options);\n\n    if (container) {\n      result = $(selector, container);\n    } else {\n      result = this.testContext.$(selector);\n    }\n\n    guardMultiple(result, selector, options.multiple);\n\n    if (result.length === 0) {\n      throwBetterError(this.pageObjectNode, options.pageObjectKey, selector);\n    }\n\n    return result;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/extend/find-element.js":"import { getExecutionContext } from '../execution_context';\n\n/**\n * @public\n *\n * Returns a jQuery element (can be an empty jQuery result)\n *\n * @example\n *\n * import { findElement } from 'ember-cli-page-object/extend';\n *\n * export default function isDisabled(selector, options = {}) {\n *   return {\n *     isDescriptor: true,\n *\n *     get() {\n *       return findElement(this, selector, options).is(':disabled');\n *     }\n *   };\n * }\n *\n * @param {Ceibo} pageObjectNode - Node of the tree\n * @param {string} targetSelector - Specific CSS selector\n * @param {Object} options - Additional options\n * @param {boolean} options.resetScope - Do not use inherited scope\n * @param {string} options.contains - Filter by using :contains('foo') pseudo-class\n * @param {number} options.at - Filter by index using :eq(x) pseudo-class\n * @param {boolean} options.last - Filter by using :last pseudo-class\n * @param {boolean} options.visible - Filter by using :visible pseudo-class\n * @param {boolean} options.multiple - Specify if built selector can match multiple elements.\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @return {Object} jQuery object\n *\n * @throws Will throw an error if multiple elements are matched by selector and multiple option is not set\n */\nexport function findElement(pageObjectNode, targetSelector, options = {}) {\n  let executionContext = getExecutionContext(pageObjectNode);\n\n  return executionContext.run((context) => {\n    return context.find(targetSelector, options);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/extend/find-element-with-assert.js":"import { getExecutionContext } from '../execution_context';\n\n/**\n * @public\n *\n * Returns a jQuery element matched by a selector built from parameters\n *\n * @example\n *\n * import { findElementWithAssert } from 'ember-cli-page-object/extend';\n *\n * export default function isDisabled(selector, options = {}) {\n *   return {\n *     isDescriptor: true,\n *\n *     get() {\n *       return findElementWithAssert(this, selector, options).is(':disabled');\n *     }\n *   };\n * }\n *\n * @param {Ceibo} pageObjectNode - Node of the tree\n * @param {string} targetSelector - Specific CSS selector\n * @param {Object} options - Additional options\n * @param {boolean} options.resetScope - Do not use inherited scope\n * @param {string} options.contains - Filter by using :contains('foo') pseudo-class\n * @param {number} options.at - Filter by index using :eq(x) pseudo-class\n * @param {boolean} options.last - Filter by using :last pseudo-class\n * @param {boolean} options.visible - Filter by using :visible pseudo-class\n * @param {boolean} options.multiple - Specify if built selector can match multiple elements.\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @param {string} options.pageObjectKey - Used in the error message when the element is not found\n * @return {Object} jQuery object\n *\n * @throws Will throw an error if no element matches selector\n * @throws Will throw an error if multiple elements are matched by selector and multiple option is not set\n */\nexport function findElementWithAssert(pageObjectNode, targetSelector, options = {}) {\n  let executionContext = getExecutionContext(pageObjectNode);\n\n  return executionContext.run((context) => {\n    return context.findWithAssert(targetSelector, options);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/as.js":"/**\n * @public\n *\n * Allow to perform operations on intermediate results within the chain.\n *\n * Useful for grouping what's being tested.\n *\n * @example\n * andThen(() => {\n *   page.users(1).as(user => {\n *     assert.equal(user.name, 'John');\n *     assert.equal(user.lastName, 'Doe');\n *     assert.equal(user.email, 'john@doe');\n *   });\n *\n *   page.users(2).as(user => {\n *     assert.equal(user.name, 'John');\n *     assert.equal(user.lastName, 'Doe');\n *     assert.equal(user.email, 'john@doe');\n *   });\n *\n *   page.users(3).as(user => {\n *     assert.equal(user.name, 'John');\n *     assert.equal(user.lastName, 'Doe');\n *     assert.equal(user.email, 'john@doe');\n *   });\n * });\n *\n * @example\n * // Lorem <span>ipsum <strong>dolor</strong></span>\n *\n * let page = create({\n *   scope: 'span',\n *   foo: {\n *     bar: {\n *       scope: 'strong'\n *     }\n *   }\n * });\n *\n * page.foo.bar.as(element => {\n *   assert.equal(element.text, 'dolor');\n * });\n *\n * @param {function} callback - Function to be called with the current object as the parameter\n * @return {object} this\n *\n */\nexport function as(callback) {\n  callback(this);\n  return this;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/attribute.js":"import { assign, map } from '../helpers';\nimport { getExecutionContext } from '../execution_context';\n\n/**\n * @public\n *\n * Returns the value of an attribute from the matched element, or an array of\n * values from multiple matched elements.\n *\n * @example\n * // <input placeholder=\"a value\">\n *\n * const page = PageObject.create({\n *   inputPlaceholder: PageObject.attribute('placeholder', 'input')\n * });\n *\n * assert.equal(page.inputPlaceholder, 'a value');\n *\n * @example\n *\n * // <input placeholder=\"a value\">\n * // <input placeholder=\"other value\">\n *\n * const page = PageObject.create({\n *   inputPlaceholders: PageObject.attribute('placeholder', ':input', { multiple: true })\n * });\n *\n * assert.deepEqual(page.inputPlaceholders, ['a value', 'other value']);\n *\n * @example\n *\n * // <div><input></div>\n * // <div class=\"scope\"><input placeholder=\"a value\"></div>\n * // <div><input></div>\n *\n * const page = PageObject.create({\n *   inputPlaceholder: PageObject.attribute('placeholder', ':input', { scope: '.scope' })\n * });\n *\n * assert.equal(page.inputPlaceholder, 'a value');\n *\n * @example\n *\n * // <div><input></div>\n * // <div class=\"scope\"><input placeholder=\"a value\"></div>\n * // <div><input></div>\n *\n * const page = PageObject.create({\n *   scope: 'scope',\n *   inputPlaceholder: PageObject.attribute('placeholder', ':input')\n * });\n *\n * assert.equal(page.inputPlaceholder, 'a value');\n *\n * @public\n *\n * @param {string} attributeName - Name of the attribute to get\n * @param {string} selector - CSS selector of the element to check\n * @param {Object} options - Additional options\n * @param {string} options.scope - Nests provided scope within parent's scope\n * @param {boolean} options.resetScope - Override parent's scope\n * @param {number} options.at - Reduce the set of matched elements to the one at the specified index\n * @param {boolean} options.multiple - If set, the function will return an array of values\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @return {Descriptor}\n *\n * @throws Will throw an error if no element matches selector\n * @throws Will throw an error if multiple elements are matched by selector and multiple option is not set\n */\nexport function attribute(attributeName, selector, userOptions = {}) {\n  return {\n    isDescriptor: true,\n\n    get(key) {\n      let executionContext = getExecutionContext(this);\n      let options = assign({ pageObjectKey: key }, userOptions);\n\n      return executionContext.run((context) => {\n        let elements = context.findWithAssert(selector, options);\n        let result;\n\n        result = map(elements, function(element) {\n          return element.attr(attributeName);\n        });\n\n        return options.multiple ? result : result[0];\n      });\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/clickable.js":"import { assign, buildSelector, findClosestValue } from '../helpers';\nimport { getExecutionContext } from '../execution_context';\n\n/**\n * Clicks elements matched by a selector.\n *\n * @example\n *\n * // <button class=\"continue\">Continue<button>\n * // <button>Cancel</button>\n *\n * const page = PageObject.create({\n *   continue: clickable('button.continue')\n * });\n *\n * // clicks on element with selector 'button.continue'\n * page.continue();\n *\n * @example\n *\n * // <div class=\"scope\">\n * //   <button>Continue<button>\n * // </div>\n * // <button>Cancel</button>\n *\n * const page = PageObject.create({\n *   continue: clickable('button.continue', { scope: '.scope' })\n * });\n *\n * // clicks on element with selector '.scope button.continue'\n * page.continue();\n *\n * @example\n *\n * // <div class=\"scope\">\n * //   <button>Continue<button>\n * // </div>\n * // <button>Cancel</button>\n *\n * const page = PageObject.create({\n *   scope: '.scope',\n *   continue: clickable('button.continue')\n * });\n *\n * // clicks on element with selector '.scope button.continue'\n * page.continue();\n *\n * @public\n *\n * @param {string} selector - CSS selector of the element to click\n * @param {Object} options - Additional options\n * @param {string} options.scope - Nests provided scope within parent's scope\n * @param {number} options.at - Reduce the set of matched elements to the one at the specified index\n * @param {boolean} options.visible - Make the action to raise an error if the element is not visible\n * @param {boolean} options.resetScope - Ignore parent scope\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @return {Descriptor}\n */\nexport function clickable(selector, userOptions = {}) {\n  return {\n    isDescriptor: true,\n\n    get(key) {\n      return function() {\n        let executionContext = getExecutionContext(this);\n        let options = assign({ pageObjectKey: `${key}()` }, userOptions);\n\n        return executionContext.runAsync((context) => {\n          let fullSelector = buildSelector(this, selector, options);\n          let container = options.testContainer || findClosestValue(this, 'testContainer');\n\n          context.assertElementExists(fullSelector, options);\n\n          context.click(fullSelector, container);\n        });\n      };\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/click-on-text.js":"import { assign, findClosestValue } from '../helpers';\nimport { getExecutionContext } from '../execution_context';\nimport { buildSelector } from './click-on-text/helpers';\n\n/**\n * Clicks on an element containing specified text.\n *\n * The element can either match a specified selector,\n * or be inside an element matching the specified selector.\n *\n * @example\n *\n * // <fieldset>\n * //  <button>Lorem</button>\n * //  <button>Ipsum</button>\n * // </fieldset>\n *\n * const page = PageObject.create({\n *   clickOnFieldset: PageObject.clickOnText('fieldset'),\n *   clickOnButton: PageObject.clickOnText('button')\n * });\n *\n * // queries the DOM with selector 'fieldset :contains(\"Lorem\"):last'\n * page.clickOnFieldset('Lorem');\n *\n * // queries the DOM with selector 'button:contains(\"Ipsum\")'\n * page.clickOnButton('Ipsum');\n *\n * @example\n *\n * // <div class=\"scope\">\n * //   <fieldset>\n * //    <button>Lorem</button>\n * //    <button>Ipsum</button>\n * //   </fieldset>\n * // </div>\n *\n * const page = PageObject.create({\n *   clickOnFieldset: PageObject.clickOnText('fieldset', { scope: '.scope' }),\n *   clickOnButton: PageObject.clickOnText('button', { scope: '.scope' })\n * });\n *\n * // queries the DOM with selector '.scope fieldset :contains(\"Lorem\"):last'\n * page.clickOnFieldset('Lorem');\n *\n * // queries the DOM with selector '.scope button:contains(\"Ipsum\")'\n * page.clickOnButton('Ipsum');\n *\n * @example\n *\n * // <div class=\"scope\">\n * //   <fieldset>\n * //    <button>Lorem</button>\n * //    <button>Ipsum</button>\n * //   </fieldset>\n * // </div>\n *\n * const page = PageObject.create({\n *   scope: '.scope',\n *   clickOnFieldset: PageObject.clickOnText('fieldset'),\n *   clickOnButton: PageObject.clickOnText('button')\n * });\n *\n * // queries the DOM with selector '.scope fieldset :contains(\"Lorem\"):last'\n * page.clickOnFieldset('Lorem');\n *\n * // queries the DOM with selector '.scope button:contains(\"Ipsum\")'\n * page.clickOnButton('Ipsum');\n *\n * @public\n *\n * @param {string} selector - CSS selector of the element in which to look for text\n * @param {Object} options - Additional options\n * @param {string} options.scope - Nests provided scope within parent's scope\n * @param {number} options.at - Reduce the set of matched elements to the one at the specified index\n * @param {boolean} options.visible - Make the action to raise an error if the element is not visible\n * @param {boolean} options.resetScope - Override parent's scope\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @return {Descriptor}\n */\nexport function clickOnText(selector, userOptions = {}) {\n  return {\n    isDescriptor: true,\n\n    get(key) {\n      return function(textToClick) {\n        let executionContext = getExecutionContext(this);\n        let options = assign({ pageObjectKey: `${key}(\"${textToClick}\")`, contains: textToClick }, userOptions);\n\n        return executionContext.runAsync((context) => {\n          let fullSelector = buildSelector(this, context, selector, options);\n          let container = options.testContainer || findClosestValue(this, 'testContainer');\n\n          context.assertElementExists(fullSelector, options);\n\n          context.click(fullSelector, container);\n        });\n      };\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/collection.js":"import Ember from 'ember';\nimport { buildSelector, assign as mergeFunction } from '../helpers';\nimport { create } from '../create';\nimport { count } from './count';\nimport Ceibo from 'ceibo';\n\nconst arrayDelegateMethods = ['map', 'filter', 'mapBy', 'filterBy', 'forEach'];\n\nfunction merge(target, ...objects) {\n  objects.forEach((o) => mergeFunction(target, o));\n\n  return target;\n}\n\nfunction generateEnumerable(node, definition, item, key) {\n  let enumerable = merge({}, definition);\n\n  if (typeof (enumerable.count) === 'undefined') {\n    enumerable.count = count(item.itemScope);\n  }\n\n  if (typeof (enumerable.toArray) === 'undefined') {\n    enumerable.toArray = toArrayMethod(node, item, key);\n    arrayDelegateMethods.forEach((method) => delegateToArray(enumerable, method));\n  }\n\n  let collection = create(enumerable, { parent: node });\n\n  if (typeof (Symbol) !== 'undefined' && Symbol.iterator) {\n    collection[Symbol.iterator] = iteratorMethod;\n  }\n\n  // Change the key of the root node\n  Ceibo.meta(collection).key = `${key}()`;\n\n  return collection;\n}\n\nfunction generateItem(node, index, definition, key) {\n  let filters = merge({}, { scope: definition.scope, at: index });\n  let scope = buildSelector({}, definition.itemScope, filters);\n\n  let tree = create(merge({}, definition.item, { scope, resetScope: definition.resetScope }), { parent: node });\n\n  // Change the key of the root node\n  Ceibo.meta(tree).key = `${key}(${index})`;\n\n  return tree;\n}\n\nfunction toArrayMethod(node, definition, key) {\n  return function() {\n    let array = Ember.A();\n    let index;\n    let count;\n\n    for (index = 0, count = this.count; index < count; index++) {\n      array.push(generateItem(node, index, definition, key));\n    }\n\n    return array;\n  };\n}\n\nfunction delegateToArray(enumerable, method) {\n  if (typeof (enumerable[method]) === 'undefined') {\n    enumerable[method] = function(...args) {\n      return this.toArray()[method](...args);\n    };\n  }\n}\n\nfunction iteratorMethod() {\n  let i = 0;\n  let items = this.toArray();\n  let next = () => ({ done: i >= items.length, value: items[i++] });\n\n  return { next };\n}\n\n/**\n * @public\n *\n * Creates a component that represents a collection of items. The collection is zero-indexed.\n *\n * When called with an index, the method returns the matching item.\n *\n * When called without an index, the the object returned behaves as a regular PageObject with a few additional properties and methods:\n *\n * - `count` - the number of items in the collection\n * - `toArray()` - returns an array containing all the items in the collection\n * - `[Symbol.iterator]()` - if supported by the environment, this allows the collection to be iterated with `for/of` and spread with `...` like a normal array\n *\n * Collection objects also delegate the following methods to `toArray()` for ease of consumption:\n * - `map`\n * - `mapBy`\n * - `filter`\n * - `filterBy`\n * - `forEach`\n *\n * @example\n *\n * // <table>\n * //   <caption>List of users</caption>\n * //   <tbody>\n * //     <tr>\n * //       <td>Mary<td>\n * //       <td>Watson</td>\n * //     </tr>\n * //     <tr>\n * //       <td>John<td>\n * //       <td>Doe</td>\n * //     </tr>\n * //   </tbody>\n * // </table>\n *\n * const page = PageObject.create({\n *   users: collection({\n *     itemScope: 'table tr',\n *\n *     item: {\n *       firstName: text('td', { at: 0 }),\n *       lastName: text('td', { at: 1 })\n *     },\n *\n *     caption: text('caption')\n *   })\n * });\n *\n * assert.equal(page.users().count, 2);\n * assert.equal(page.users().caption, 'List of users');\n * assert.equal(page.users(1).firstName, 'John');\n * assert.equal(page.users(1).lastName, 'Doe');\n *\n * @example\n *\n * // <div class=\"admins\">\n * //   <table>\n * //     <tbody>\n * //       <tr>\n * //         <td>Mary<td>\n * //         <td>Watson</td>\n * //       </tr>\n * //       <tr>\n * //         <td>John<td>\n * //         <td>Doe</td>\n * //       </tr>\n * //     </tbody>\n * //   </table>\n * // </div>\n *\n * // <div class=\"normal\">\n * //   <table>\n * //   </table>\n * // </div>\n *\n * const page = PageObject.create({\n *   users: collection({\n *     scope: '.admins',\n *\n *     itemScope: 'table tr',\n *\n *     item: {\n *       firstName: text('td', { at: 0 }),\n *       lastName: text('td', { at: 1 })\n *     }\n *   })\n * });\n *\n * assert.equal(page.users().count, 2);\n *\n * @example\n *\n * // <table>\n * //   <caption>User Index</caption>\n * //   <tbody>\n * //     <tr>\n * //       <td>Doe</td>\n * //     </tr>\n * //   </tbody>\n * // </table>\n *\n * const page = PageObject.create({\n *   users: PageObject.collection({\n *     scope: 'table',\n *     itemScope: 'tr',\n *\n *     item: {\n *       firstName: text('td', { at: 0 })\n *     },\n *\n *     caption: PageObject.text('caption')\n *   })\n * });\n *\n * assert.equal(page.users().caption, 'User Index');\n *\n * @param {Object} definition - Collection definition\n * @param {string} definition.scope - Nests provided scope within parent's scope\n * @param {boolean} definition.resetScope - Override parent's scope\n * @param {string} definition.itemScope - CSS selector\n * @param {Object} definition.item - Item definition\n * @return {Descriptor}\n */\nexport function collection(definition) {\n  definition = mergeFunction({}, definition);\n\n  let item = {\n    scope: definition.scope,\n    itemScope: definition.itemScope,\n    resetScope: definition.resetScope,\n    item: definition.item\n  };\n\n  delete definition.item;\n  delete definition.itemScope;\n\n  return {\n    isDescriptor: true,\n\n    get(key) {\n      return (index) => {\n        if (typeof (index) === 'number') {\n          return generateItem(this, index, item, key);\n        } else {\n          return generateEnumerable(this, definition, item, key);\n        }\n      };\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/contains.js":"import { assign, every } from '../helpers';\nimport { getExecutionContext } from '../execution_context';\n\n/**\n * Returns a boolean representing whether an element or a set of elements contains the specified text.\n *\n * @example\n *\n * // Lorem <span>ipsum</span>\n *\n * const page = PageObject.create({\n *   spanContains: PageObject.contains('span')\n * });\n *\n * assert.ok(page.spanContains('ipsum'));\n *\n * @example\n *\n * // <span>lorem</span>\n * // <span>ipsum</span>\n * // <span>dolor</span>\n *\n * const page = PageObject.create({\n *   spansContain: PageObject.contains('span', { multiple: true })\n * });\n *\n * // not all spans contain 'lorem'\n * assert.notOk(page.spansContain('lorem'));\n *\n * @example\n *\n * // <span>super text</span>\n * // <span>regular text</span>\n *\n * const page = PageObject.create({\n *   spansContain: PageObject.contains('span', { multiple: true })\n * });\n *\n * // all spans contain 'text'\n * assert.ok(page.spanContains('text'));\n *\n * @example\n *\n * // <div><span>lorem</span></div>\n * // <div class=\"scope\"><span>ipsum</span></div>\n * // <div><span>dolor</span></div>\n *\n * const page = PageObject.create({\n *   spanContains: PageObject.contains('span', { scope: '.scope' })\n * });\n *\n * assert.notOk(page.spanContains('lorem'));\n * assert.ok(page.spanContains('ipsum'));\n *\n * @example\n *\n * // <div><span>lorem</span></div>\n * // <div class=\"scope\"><span>ipsum</span></div>\n * // <div><span>dolor</span></div>\n *\n * const page = PageObject.create({\n *   scope: '.scope',\n\n *   spanContains: PageObject.contains('span')\n * });\n *\n * assert.notOk(page.spanContains('lorem'));\n * assert.ok(page.spanContains('ipsum'));\n *\n * @public\n *\n * @param {string} selector - CSS selector of the element to check\n * @param {Object} options - Additional options\n * @param {string} options.scope - Nests provided scope within parent's scope\n * @param {number} options.at - Reduce the set of matched elements to the one at the specified index\n * @param {boolean} options.resetScope - Override parent's scope\n * @param {boolean} options.multiple - Check if all elements matched by selector contain the subtext\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @return {Descriptor}\n *\n * @throws Will throw an error if no element matches selector\n * @throws Will throw an error if multiple elements are matched by selector and multiple option is not set\n */\nexport function contains(selector, userOptions = {}) {\n  return {\n    isDescriptor: true,\n\n    get(key) {\n      return function(textToSearch) {\n        let executionContext = getExecutionContext(this);\n        let options = assign({ pageObjectKey: `${key}(\"${textToSearch}\")` }, userOptions);\n\n        return executionContext.run((context) => {\n          let elements = context.findWithAssert(selector, options);\n\n          return every(elements, function(element) {\n            return element.text().indexOf(textToSearch) >= 0;\n          });\n        });\n      };\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/count.js":"import { assign } from '../helpers';\nimport { getExecutionContext } from '../execution_context';\n\n/**\n * @public\n *\n * Returns the number of elements matched by a selector.\n *\n * @example\n *\n * // <span>1</span>\n * // <span>2</span>\n *\n * const page = PageObject.create({\n *   spanCount: PageObject.count('span')\n * });\n *\n * assert.equal(page.spanCount, 2);\n *\n * @example\n *\n * // <div>Text</div>\n *\n * const page = PageObject.create({\n *   spanCount: PageObject.count('span')\n * });\n *\n * assert.equal(page.spanCount, 0);\n *\n * @example\n *\n * // <div><span></span></div>\n * // <div class=\"scope\"><span></span><span></span></div>\n *\n * const page = PageObject.create({\n *   spanCount: PageObject.count('span', { scope: '.scope' })\n * });\n *\n * assert.equal(page.spanCount, 2)\n *\n * @example\n *\n * // <div><span></span></div>\n * // <div class=\"scope\"><span></span><span></span></div>\n *\n * const page = PageObject.create({\n *   scope: '.scope',\n *   spanCount: PageObject.count('span')\n * });\n *\n * assert.equal(page.spanCount, 2)\n *\n * @example\n *\n * // <div><span></span></div>\n * // <div class=\"scope\"><span></span><span></span></div>\n *\n * const page = PageObject.create({\n *   scope: '.scope',\n *   spanCount: PageObject.count('span', { resetScope: true })\n * });\n *\n * assert.equal(page.spanCount, 1);\n *\n * @public\n *\n * @param {string} selector - CSS selector of the element or elements to check\n * @param {Object} options - Additional options\n * @param {string} options.scope - Add scope\n * @param {boolean} options.resetScope - Ignore parent scope\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @return {Descriptor}\n */\nexport function count(selector, userOptions = {}) {\n  return {\n    isDescriptor: true,\n\n    get(key) {\n      let executionContext = getExecutionContext(this);\n      let options = assign({ pageObjectKey: key }, userOptions);\n\n      options = assign(options, { multiple: true });\n\n      return executionContext.run((context) => {\n        return context.find(selector, options).length;\n      });\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/fillable.js":"import { assign, buildSelector, findClosestValue } from '../helpers';\nimport { getExecutionContext } from '../execution_context';\n\n/**\n * Alias for `fillable`, which works for inputs and HTML select menus.\n *\n * [See `fillable` for usage examples.](#fillable)\n *\n * @name selectable\n * @function\n *\n * @public\n *\n * @param {string} selector - CSS selector of the element to look for text\n * @param {Object} options - Additional options\n * @param {string} options.scope - Nests provided scope within parent's scope\n * @param {number} options.at - Reduce the set of matched elements to the one at the specified index\n * @param {boolean} options.resetScope - Override parent's scope\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @return {Descriptor}\n */\n\n/**\n * Fills in an input matched by a selector.\n *\n * @example\n *\n * // <input value=\"\">\n *\n * const page = PageObject.create({\n *   fillIn: PageObject.fillable('input')\n * });\n *\n * // result: <input value=\"John Doe\">\n * page.fillIn('John Doe');\n *\n * @example\n *\n * // <div class=\"name\">\n * //   <input value=\"\">\n * // </div>\n * // <div class=\"last-name\">\n * //   <input value= \"\">\n * // </div>\n *\n * const page = PageObject.create({\n *   fillInName: PageObject.fillable('input', { scope: '.name' })\n * });\n *\n * page.fillInName('John Doe');\n *\n * // result\n * // <div class=\"name\">\n * //   <input value=\"John Doe\">\n * // </div>\n *\n * @example\n *\n * // <div class=\"name\">\n * //   <input value=\"\">\n * // </div>\n * // <div class=\"last-name\">\n * //   <input value= \"\">\n * // </div>\n *\n * const page = PageObject.create({\n *   scope: 'name',\n *   fillInName: PageObject.fillable('input')\n * });\n *\n * page.fillInName('John Doe');\n *\n * // result\n * // <div class=\"name\">\n * //   <input value=\"John Doe\">\n * // </div>\n *\n * @example <caption>Filling different inputs with the same property</caption>\n *\n * // <input id=\"name\">\n * // <input name=\"lastname\">\n * // <input data-test=\"email\">\n * // <textarea aria-label=\"address\">\n * // <input placeholder=\"phone\">\n *\n * const page = create({\n *   fillIn: fillable('input')\n * });\n *\n * page\n *   .fillIn('name', 'Doe')\n *   .fillIn('lastname', 'Doe')\n *   .fillIn('email', 'john@doe')\n *   .fillIn('address', 'A street')\n *   .fillIn('phone', '555-000');\n *\n * @public\n *\n * @param {string} selector - CSS selector of the element to look for text\n * @param {Object} options - Additional options\n * @param {string} options.scope - Nests provided scope within parent's scope\n * @param {number} options.at - Reduce the set of matched elements to the one at the specified index\n * @param {boolean} options.resetScope - Override parent's scope\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @return {Descriptor}\n */\nexport function fillable(selector, userOptions = {}) {\n  return {\n    isDescriptor: true,\n\n    get(key) {\n      return function(textOrClue, text) {\n        let clue;\n\n        if (text === undefined) {\n          text = textOrClue;\n        } else {\n          clue = textOrClue;\n        }\n\n        let executionContext = getExecutionContext(this);\n        let options = assign({ pageObjectKey: `${key}()` }, userOptions);\n\n        return executionContext.runAsync((context) => {\n          let fullSelector = buildSelector(this, selector, options);\n          let container = options.testContainer || findClosestValue(this, 'testContainer');\n\n          if (clue) {\n            fullSelector = ['input', 'textarea', 'select']\n              .map((tag) => [\n                `${fullSelector} ${tag}[data-test=\"${clue}\"]`,\n                `${fullSelector} ${tag}[aria-label=\"${clue}\"]`,\n                `${fullSelector} ${tag}[placeholder=\"${clue}\"]`,\n                `${fullSelector} ${tag}[name=\"${clue}\"]`,\n                `${fullSelector} ${tag}#${clue}`\n              ])\n              .reduce((total, other) => total.concat(other), [])\n              .join(',');\n          }\n\n          context.assertElementExists(fullSelector, options);\n\n          context.fillIn(fullSelector, container, text);\n        });\n      };\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/has-class.js":"import { assign, every } from '../helpers';\nimport { getExecutionContext } from '../execution_context';\n\n/**\n * Validates if an element or a set of elements have a given CSS class.\n *\n * @example\n *\n * // <em class=\"lorem\"></em><span class=\"success\">Message!</span>\n *\n * const page = PageObject.create({\n *   messageIsSuccess: PageObject.hasClass('success', 'span')\n * });\n *\n * assert.ok(page.messageIsSuccess);\n *\n * @example\n *\n * // <span class=\"success\"></span>\n * // <span class=\"error\"></span>\n *\n * const page = PageObject.create({\n *   messagesAreSuccessful: PageObject.hasClass('success', 'span', { multiple: true })\n * });\n *\n * assert.notOk(page.messagesAreSuccessful);\n *\n * @example\n *\n * // <span class=\"success\"></span>\n * // <span class=\"success\"></span>\n *\n * const page = PageObject.create({\n *   messagesAreSuccessful: PageObject.hasClass('success', 'span', { multiple: true })\n * });\n *\n * assert.ok(page.messagesAreSuccessful);\n *\n * @example\n *\n * // <div>\n * //   <span class=\"lorem\"></span>\n * // </div>\n * // <div class=\"scope\">\n * //   <span class=\"ipsum\"></span>\n * // </div>\n *\n * const page = PageObject.create({\n *   spanHasClass: PageObject.hasClass('ipsum', 'span', { scope: '.scope' })\n * });\n *\n * assert.ok(page.spanHasClass);\n *\n * @example\n *\n * // <div>\n * //   <span class=\"lorem\"></span>\n * // </div>\n * // <div class=\"scope\">\n * //   <span class=\"ipsum\"></span>\n * // </div>\n *\n * const page = PageObject.create({\n *   scope: '.scope',\n *   spanHasClass: PageObject.hasClass('ipsum', 'span')\n * });\n *\n * assert.ok(page.spanHasClass);\n *\n * @public\n *\n * @param {string} cssClass - CSS class to be validated\n * @param {string} selector - CSS selector of the element to check\n * @param {Object} options - Additional options\n * @param {string} options.scope - Nests provided scope within parent's scope\n * @param {number} options.at - Reduce the set of matched elements to the one at the specified index\n * @param {boolean} options.resetScope - Override parent's scope\n * @param {boolean} options.multiple - Check if all elements matched by selector have the CSS class\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @return {Descriptor}\n *\n * @throws Will throw an error if no element matches selector\n * @throws Will throw an error if multiple elements are matched by selector and multiple option is not set\n */\nexport function hasClass(cssClass, selector, userOptions = {}) {\n  return {\n    isDescriptor: true,\n\n    get(key) {\n      let executionContext = getExecutionContext(this);\n      let options = assign({ pageObjectKey: key }, userOptions);\n\n      return executionContext.run((context) => {\n        let elements = context.findWithAssert(selector, options);\n\n        return every(elements, function(element) {\n          return element.hasClass(cssClass);\n        });\n      });\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/is-hidden.js":"import { assign, every } from '../helpers';\nimport { getExecutionContext } from '../execution_context';\n\n/**\n * Validates if an element or set of elements is hidden or does not exist in the DOM.\n *\n * @example\n *\n * // Lorem <span style=\"display:none\">ipsum</span>\n *\n * const page = PageObject.create({\n *   spanIsHidden: PageObject.isHidden('span')\n * });\n *\n * assert.ok(page.spanIsHidden);\n *\n * @example\n *\n * // <span>ipsum</span>\n * // <span style=\"display:none\">dolor</span>\n *\n * const page = create({\n *   spansAreHidden: PageObject.isHidden('span', { multiple: true })\n * });\n *\n * // not all spans are hidden\n * assert.notOk(page.spansAreHidden);\n *\n * @example\n *\n * // <span style=\"display:none\">dolor</span>\n * // <span style=\"display:none\">dolor</span>\n *\n * const page = create({\n *   spansAreHidden: PageObject.isHidden('span', { multiple: true })\n * });\n *\n * // all spans are hidden\n * assert.ok(page.spansAreHidden);\n *\n * @example\n *\n * // Lorem <strong>ipsum</strong>\n *\n * const page = PageObject.create({\n *   spanIsHidden: PageObject.isHidden('span')\n * });\n *\n * // returns true when element doesn't exist in DOM\n * assert.ok(page.spanIsHidden);\n *\n * @example\n *\n * // <div><span>lorem</span></div>\n * // <div class=\"scope\"><span style=\"display:none\">ipsum</span></div>\n * // <div><span>dolor</span></div>\n *\n * const page = PageObject.create({\n *   scopedSpanIsHidden: PageObject.isHidden('span', { scope: '.scope' })\n * });\n *\n * assert.ok(page.scopedSpanIsHidden);\n *\n * @example\n *\n * // <div><span>lorem</span></div>\n * // <div class=\"scope\"><span style=\"display:none\">ipsum</span></div>\n * // <div><span>dolor</span></div>\n *\n * const page = PageObject.create({\n *   scope: '.scope',\n *   scopedSpanIsHidden: PageObject.isHidden('span')\n * });\n *\n * assert.ok(page.scopedSpanIsHidden);\n *\n * @public\n *\n * @param {string} selector - CSS selector of the element to check\n * @param {Object} options - Additional options\n * @param {string} options.scope - Nests provided scope within parent's scope\n * @param {number} options.at - Reduce the set of matched elements to the one at the specified index\n * @param {boolean} options.resetScope - Override parent's scope\n * @param {boolean} options.multiple - Check if all elements matched by selector are hidden\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @return {Descriptor}\n *\n * @throws Will throw an error if multiple elements are matched by selector and multiple option is not set\n */\nexport function isHidden(selector, userOptions = {}) {\n  return {\n    isDescriptor: true,\n\n    get(key) {\n      let executionContext = getExecutionContext(this);\n      let options = assign({ pageObjectKey: key }, userOptions);\n\n      return executionContext.run((context) => {\n        let elements = context.find(selector, options);\n\n        return every(elements, function(element) {\n          return element.is(':hidden');\n        });\n      });\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/is.js":"import { assign, every } from '../helpers';\nimport { getExecutionContext } from '../execution_context';\n\n/**\n * @public\n *\n * Validates if an element (or elements) matches a given selector.\n *\n * Useful for checking if an element (or elements) matches a selector like\n * `:disabled` or `:checked`, which can be the result of either an attribute\n * (`disabled=\"disabled\"`, `disabled=true`) or a property (`disabled`).\n *\n * @example\n * // <input type=\"checkbox\" checked=\"checked\">\n * // <input type=\"checkbox\" checked>\n *\n * const page = PageObject.create({\n *   areInputsChecked: is(':checked', 'input', { multiple: true })\n * });\n *\n * assert.equal(page.areInputsChecked, true, 'Inputs are checked');\n *\n * @example\n * // <button class=\"toggle-button active\" disabled>Toggle something</button>\n *\n * const page = PageObject.create({\n *   isToggleButtonActive: is('.active:disabled', '.toggle-button')\n * });\n *\n * assert.equal(page.isToggleButtonActive, true, 'Button is active');\n *\n * @param {string} testSelector - CSS selector to test\n * @param {string} targetSelector - CSS selector of the element to check\n * @param {Object} options - Additional options\n * @param {string} options.scope - Nests provided scope within parent's scope\n * @param {boolean} options.resetScope - Override parent's scope\n * @param {number} options.at - Reduce the set of matched elements to the one at the specified index\n * @param {boolean} options.multiple - If set, the function will return an array of values\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @return {Descriptor}\n *\n * @throws Will throw an error if no element matches selector\n * @throws Will throw an error if multiple elements are matched by selector and multiple option is not set\n */\nexport function is(testSelector, targetSelector, userOptions = {}) {\n  return {\n    isDescriptor: true,\n\n    get(key) {\n      let executionContext = getExecutionContext(this);\n      let options = assign({ pageObjectKey: key }, userOptions);\n\n      return executionContext.run((context) => {\n        let elements = context.findWithAssert(targetSelector, options);\n\n        return every(elements, function(element) {\n          return element.is(testSelector);\n        });\n      });\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/is-visible.js":"import { assign, every } from '../helpers';\nimport { getExecutionContext } from '../execution_context';\n\n/**\n * Validates if an element or set of elements are visible.\n *\n * @example\n *\n * // Lorem <span>ipsum</span>\n *\n * const page = PageObject.create({\n *   spanIsVisible: PageObject.isVisible('span')\n * });\n *\n * assert.ok(page.spanIsVisible);\n *\n * @example\n *\n * // <span>ipsum</span>\n * // <span style=\"display:none\">dolor</span>\n *\n * const page = PageObject.create({\n *   spansAreVisible: PageObject.isVisible('span', { multiple: true })\n * });\n *\n * // not all spans are visible\n * assert.notOk(page.spansAreVisible);\n *\n * @example\n *\n * // <span>ipsum</span>\n * // <span>dolor</span>\n *\n * const page = PageObject.create({\n *   spansAreVisible: PageObject.isVisible('span', { multiple: true })\n * });\n *\n * // all spans are visible\n * assert.ok(page.spansAreVisible);\n *\n * @example\n *\n * // Lorem <strong>ipsum</strong>\n *\n * const page = PageObject.create({\n *   spanIsVisible: PageObject.isVisible('span')\n * });\n *\n * // returns false when element doesn't exist in DOM\n * assert.notOk(page.spanIsVisible);\n *\n * @example\n *\n * // <div>\n * //   <span style=\"display:none\">lorem</span>\n * // </div>\n * // <div class=\"scope\">\n * //   <span>ipsum</span>\n * // </div>\n *\n * const page = PageObject.create({\n *   spanIsVisible: PageObject.isVisible('span', { scope: '.scope' })\n * });\n *\n * assert.ok(page.spanIsVisible);\n *\n * @example\n *\n * // <div>\n * //   <span style=\"display:none\">lorem</span>\n * // </div>\n * // <div class=\"scope\">\n * //   <span>ipsum</span>\n * // </div>\n *\n * const page = PageObject.create({\n *   scope: '.scope',\n *   spanIsVisible: PageObject.isVisible('span')\n * });\n *\n * assert.ok(page.spanIsVisible);\n *\n * @public\n *\n * @param {string} selector - CSS selector of the element to check\n * @param {Object} options - Additional options\n * @param {string} options.scope - Nests provided scope within parent's scope\n * @param {number} options.at - Reduce the set of matched elements to the one at the specified index\n * @param {boolean} options.resetScope - Override parent's scope\n * @param {boolean} options.multiple - Check if all elements matched by selector are visible\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @return {Descriptor}\n *\n * @throws Will throw an error if multiple elements are matched by selector and multiple option is not set\n */\nexport function isVisible(selector, userOptions = {}) {\n  return {\n    isDescriptor: true,\n\n    get(key) {\n      let executionContext = getExecutionContext(this);\n      let options = assign({ pageObjectKey: key }, userOptions);\n\n      return executionContext.run((context) => {\n        let elements = context.find(selector, options);\n\n        if (elements.length === 0) {\n          return false;\n        }\n\n        return every(elements, function(element) {\n          return element.is(':visible');\n        });\n      });\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/not-has-class.js":"import { assign, every } from '../helpers';\nimport { getExecutionContext } from '../execution_context';\n\n/**\n * @public\n *\n * Validates if an element or a set of elements don't have a given CSS class.\n *\n * @example\n *\n * // <em class=\"lorem\"></em><span class=\"success\">Message!</span>\n *\n * const page = PageObject.create({\n *   messageIsSuccess: PageObject.notHasClass('error', 'span')\n * });\n *\n * assert.ok(page.messageIsSuccess);\n *\n * @example\n *\n * // <span class=\"success\"></span>\n * // <span class=\"error\"></span>\n *\n * const page = PageObject.create({\n *   messagesAreSuccessful: PageObject.notHasClass('error', 'span', { multiple: true })\n * });\n *\n * // one span has error class\n * assert.notOk(page.messagesAreSuccessful);\n *\n * @example\n *\n * // <span class=\"success\"></span>\n * // <span class=\"success\"></span>\n *\n * const page = PageObject.create({\n *   messagesAreSuccessful: PageObject.notHasClass('error', 'span', { multiple: true })\n * });\n *\n * // no spans have error class\n * assert.ok(page.messagesAreSuccessful);\n *\n * @example\n *\n * // <div>\n * //   <span class=\"lorem\"></span>\n * // </div>\n * // <div class=\"scope\">\n * //   <span class=\"ipsum\"></span>\n * // </div>\n *\n * const page = PageObject.create({\n *   spanNotHasClass: PageObject.notHasClass('lorem', 'span', { scope: '.scope' })\n * });\n *\n * assert.ok(page.spanNotHasClass);\n *\n * @example\n *\n * // <div>\n * //   <span class=\"lorem\"></span>\n * // </div>\n * // <div class=\"scope\">\n * //   <span class=\"ipsum\"></span>\n * // </div>\n *\n * const page = PageObject.create({\n *   scope: '.scope',\n *   spanNotHasClass: PageObject.notHasClass('lorem', 'span')\n * });\n *\n * assert.ok(page.spanNotHasClass);\n *\n * @public\n *\n * @param {string} cssClass - CSS class to be validated\n * @param {string} selector - CSS selector of the element to check\n * @param {Object} options - Additional options\n * @param {string} options.scope - Nests provided scope within parent's scope\n * @param {number} options.at - Reduce the set of matched elements to the one at the specified index\n * @param {boolean} options.resetScope - Override parent's scope\n * @param {boolean} options.multiple - Check if all elements matched by selector don't have the CSS class\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @return {Descriptor}\n *\n * @throws Will throw an error if no element matches selector\n * @throws Will throw an error if multiple elements are matched by selector and multiple option is not set\n */\nexport function notHasClass(cssClass, selector, userOptions = {}) {\n  return {\n    isDescriptor: true,\n\n    get(key) {\n      let executionContext = getExecutionContext(this);\n      let options = assign({ pageObjectKey: key }, userOptions);\n\n      return executionContext.run((context) => {\n        let elements = context.findWithAssert(selector, options);\n\n        return every(elements, function(element) {\n          return !element.hasClass(cssClass);\n        });\n      });\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/property.js":"import { assign, map } from '../helpers';\nimport { getExecutionContext } from '../execution_context';\n\n/**\n * @public\n *\n * Returns the value of a property from the matched element, or an array of\n * values from multiple matched elements.\n *\n * @example\n * // <input type=\"checkbox\" checked=\"checked\">\n *\n * const page = PageObject.create({\n *   isChecked: PageObject.property('checked', 'input')\n * });\n *\n * assert.ok(page.isChecked);\n *\n * @example\n *\n * // <input type=\"checkbox\" checked=\"checked\">\n * // <input type=\"checkbox\" checked=\"\">\n *\n * const page = PageObject.create({\n *   inputsChecked: PageObject.property('checked', 'input', { multiple: true })\n * });\n *\n * assert.deepEqual(page.inputsChecked, [true, false]);\n *\n * @example\n *\n * // <div><input></div>\n * // <div class=\"scope\"><input type=\"checkbox\" checked=\"checked\"></div>\n * // <div><input></div>\n *\n * const page = PageObject.create({\n *   isChecked: PageObject.property('checked', 'input', { scope: '.scope' })\n * });\n *\n * assert.ok(page.isChecked);\n *\n * @public\n *\n * @param {string} propertyName - Name of the property to get\n * @param {string} selector - CSS selector of the element to check\n * @param {Object} options - Additional options\n * @param {string} options.scope - Nests provided scope within parent's scope\n * @param {boolean} options.resetScope - Override parent's scope\n * @param {number} options.at - Reduce the set of matched elements to the one at the specified index\n * @param {boolean} options.multiple - If set, the function will return an array of values\n * @return {Descriptor}\n *\n * @throws Will throw an error if no element matches selector\n * @throws Will throw an error if multiple elements are matched by selector and multiple option is not set\n */\nexport function property(propertyName, selector, userOptions = {}) {\n  return {\n    isDescriptor: true,\n\n    get(key) {\n      let executionContext = getExecutionContext(this);\n      let options = assign({ pageObjectKey: key }, userOptions);\n\n      return executionContext.run((context) => {\n        let elements = context.findWithAssert(selector, options);\n        let result;\n\n        result = map(elements, function(element) {\n          return element.prop(propertyName);\n        });\n\n        return options.multiple ? result : result[0];\n      });\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/text.js":"import { assign, map, normalizeText } from '../helpers';\nimport { getExecutionContext } from '../execution_context';\n\nfunction identity(v) {\n  return v;\n}\n\n/**\n * @public\n *\n * Returns text of the element or Array of texts of all matched elements by selector.\n *\n * @example\n *\n * // Hello <span>world!</span>\n *\n * const page = PageObject.create({\n *   text: PageObject.text('span')\n * });\n *\n * assert.equal(page.text, 'world!');\n *\n * @example\n *\n * // <span>lorem</span>\n * // <span> ipsum </span>\n * // <span>dolor</span>\n *\n * const page = PageObject.create({\n *   texts: PageObject.text('span', { multiple: true })\n * });\n *\n * assert.deepEqual(page.texts, ['lorem', 'ipsum', 'dolor']);\n *\n * @example\n *\n * // <div><span>lorem</span></div>\n * // <div class=\"scope\"><span>ipsum</span></div>\n * // <div><span>dolor</span></div>\n *\n * const page = PageObject.create({\n *   text: PageObject.text('span', { scope: '.scope' })\n * });\n *\n * assert.equal(page.text, 'ipsum');\n *\n * @example\n *\n * // <div><span>lorem</span></div>\n * // <div class=\"scope\"><span>ipsum</span></div>\n * // <div><span>dolor</span></div>\n *\n * const page = PageObject.create({\n *   scope: '.scope',\n *   text: PageObject.text('span')\n * });\n *\n * // returns 'ipsum'\n * assert.equal(page.text, 'ipsum');\n *\n * @example\n *\n * // <div><span>lorem</span></div>\n * // <div class=\"scope\">\n * //  ipsum\n * // </div>\n * // <div><span>dolor</span></div>\n *\n * const page = PageObject.create({\n *   scope: '.scope',\n *   text: PageObject.text('span', { normalize: false })\n * });\n *\n * // returns 'ipsum'\n * assert.equal(page.text, '\\n ipsum\\n');\n *\n * @public\n *\n * @param {string} selector - CSS selector of the element to check\n * @param {Object} options - Additional options\n * @param {string} options.scope - Nests provided scope within parent's scope\n * @param {number} options.at - Reduce the set of matched elements to the one at the specified index\n * @param {boolean} options.resetScope - Override parent's scope\n * @param {boolean} options.multiple - Return an array of values\n * @param {boolean} options.normalize - Set to `false` to avoid text normalization\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @return {Descriptor}\n *\n * @throws Will throw an error if no element matches selector\n * @throws Will throw an error if multiple elements are matched by selector and multiple option is not set\n */\nexport function text(selector, userOptions = {}) {\n  return {\n    isDescriptor: true,\n\n    get(key) {\n      let executionContext = getExecutionContext(this);\n      let options = assign({ pageObjectKey: key }, userOptions);\n\n      return executionContext.run((context) => {\n        let elements = context.findWithAssert(selector, options);\n        let f = options.normalize === false ? identity : normalizeText;\n\n        let result = map(elements, function(element) {\n          return f(element.text());\n        });\n\n        return options.multiple ? result : result[0];\n      });\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/triggerable.js":"import { assign, buildSelector, findClosestValue } from '../helpers';\nimport { getExecutionContext } from '../execution_context';\n\n/**\n *\n * Triggers event on element matched by selector.\n *\n * @example\n *\n * // <input class=\"name\">\n * // <input class=\"email\">\n *\n * const page = PageObject.create({\n *   focus: triggerable('focus', '.name')\n * });\n *\n * // focuses on element with selector '.name'\n * page.focus();\n *\n * @example\n *\n * // <input class=\"name\">\n * // <input class=\"email\">\n *\n * const page = PageObject.create({\n *   enter: triggerable('keypress', '.name', { eventProperties: { keyCode: 13 } })\n * });\n *\n * // triggers keypress using enter key on element with selector '.name'\n * page.enter();\n *\n * @example\n *\n * // <div class=\"scope\">\n * //   <input class=\"name\">\n * // </div>\n * // <input class=\"email\">\n *\n * const page = PageObject.create({\n *   focus: triggerable('focus', '.name', { scope: '.scope' })\n * });\n *\n * // focuses on element with selector '.scope .name'\n * page.focus();\n *\n * @example\n *\n * // <div class=\"scope\">\n * //   <input class=\"name\">\n * // </div>\n * // <input class=\"email\">\n *\n * const page = PageObject.create({\n *   scope: '.scope',\n *   focus: triggerable('focus', '.name')\n * });\n *\n * // clicks on element with selector '.scope button.continue'\n * page.focus();\n *\n * @public\n *\n * @param {string} event - Event to be triggered\n * @param {string} selector - CSS selector of the element on which the event will be triggered\n * @param {Object} options - Additional options\n * @param {string} options.scope - Nests provided scope within parent's scope\n * @param {number} options.at - Reduce the set of matched elements to the one at the specified index\n * @param {boolean} options.resetScope - Ignore parent scope\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @param {string} options.eventProperties - Event properties that will be passed to trigger function\n * @return {Descriptor}\n*/\nexport function triggerable(event, selector, userOptions = {}) {\n  return {\n    isDescriptor: true,\n\n    get(key) {\n      return function() {\n        let executionContext = getExecutionContext(this);\n        let options = assign({ pageObjectKey: `${key}()` }, userOptions);\n\n        return executionContext.runAsync((context) => {\n          let fullSelector = buildSelector(this, selector, options);\n          let container =  options.testContainer || findClosestValue(this, 'testContainer');\n\n          context.assertElementExists(fullSelector, options);\n\n          context.triggerEvent(fullSelector, container, event, options.eventProperties);\n        });\n      };\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/value.js":"import { assign, map } from '../helpers';\nimport { getExecutionContext } from '../execution_context';\n\n/**\n * @public\n *\n * Returns the value of a matched element, or an array of values of all matched elements.\n *\n * @example\n *\n * // <input value=\"Lorem ipsum\">\n *\n * const page = PageObject.create({\n *   value: PageObject.value('input')\n * });\n *\n * assert.equal(page.value, 'Lorem ipsum');\n *\n * @example\n *\n * // <input value=\"lorem\">\n * // <input value=\"ipsum\">\n *\n * const page = PageObject.create({\n *   value: PageObject.value('input', { multiple: true })\n * });\n *\n * assert.deepEqual(page.value, ['lorem', 'ipsum']);\n *\n * @example\n *\n * // <div><input value=\"lorem\"></div>\n * // <div class=\"scope\"><input value=\"ipsum\"></div>\n *\n * const page = PageObject.create({\n *   value: PageObject.value('input', { scope: '.scope' })\n * });\n *\n * assert.equal(page.value, 'ipsum');\n *\n * @example\n *\n * // <div><input value=\"lorem\"></div>\n * // <div class=\"scope\"><input value=\"ipsum\"></div>\n *\n * const page = PageObject.create({\n *   scope: '.scope',\n *   value: PageObject.value('input')\n * });\n *\n * assert.equal(page.value, 'ipsum');\n *\n * @public\n *\n * @param {string} selector - CSS selector of the element to check\n * @param {Object} options - Additional options\n * @param {string} options.scope - Nests provided scope within parent's scope\n * @param {boolean} options.resetScope - Override parent's scope\n * @param {number} options.at - Reduce the set of matched elements to the one at the specified index\n * @param {boolean} options.multiple - If set, the function will return an array of values\n * @param {string} options.testContainer - Context where to search elements in the DOM\n * @return {Descriptor}\n *\n * @throws Will throw an error if no element matches selector\n * @throws Will throw an error if multiple elements are matched by selector and multiple option is not set\n */\nexport function value(selector, userOptions = {}) {\n  return {\n    isDescriptor: true,\n\n    get(key) {\n      let executionContext = getExecutionContext(this);\n      let options = assign({ pageObjectKey: key }, userOptions);\n\n      return executionContext.run((context) => {\n        let elements = context.findWithAssert(selector, options);\n        let result;\n\n        result = map(elements, function(element) {\n          return element.val();\n        });\n\n        return options.multiple ? result : result[0];\n      });\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-page-object/node_modules/ember-cli-page-object/addon/-private/properties/visitable.js":"import Ember from 'ember';\nimport { assign } from '../helpers';\nimport { getExecutionContext } from '../execution_context';\n\nconst { $ } = Ember;\n\nfunction fillInDynamicSegments(path, params) {\n  return path.split('/').map(function(segment) {\n    let match = segment.match(/^:(.+)$/);\n\n    if (match) {\n      let [, key] = match;\n      let value = params[key];\n\n      if (typeof (value) === 'undefined') {\n        throw new Error(`Missing parameter for '${key}'`);\n      }\n\n      // Remove dynamic segment key from params\n      delete params[key];\n\n      return value;\n    }\n\n    return segment;\n  }).join('/');\n}\n\nfunction appendQueryParams(path, queryParams) {\n  if (Object.keys(queryParams).length) {\n    path += `?${$.param(queryParams)}`;\n  }\n\n  return path;\n}\n\n/**\n * @public\n *\n * Loads a given route.\n *\n * The resulting descriptor can be called with dynamic segments and parameters.\n *\n * @example\n *\n * const page = PageObject.create({\n *   visit: PageObject.visitable('/users')\n * });\n *\n * // visits '/users'\n * page.visit();\n *\n * @example\n *\n * const page = PageObject.create({\n *   visit: PageObject.visitable('/users/:user_id')\n * });\n *\n * // visits '/users/10'\n * page.visit({ user_id: 10 });\n *\n * @example\n *\n * const page = PageObject.create({\n *   visit: PageObject.visitable('/users')\n * });\n *\n * // visits '/users?name=john'\n * page.visit({ name: 'john' });\n *\n * @example\n *\n * const page = PageObject.create({\n *   visit: PageObject.visitable('/users/:user_id')\n * });\n *\n * // visits '/users/1?name=john'\n * page.visit({ user_id: 1, name: 'john' });\n *\n * @param {string} path - Full path of the route to visit\n * @return {Descriptor}\n *\n * @throws Will throw an error if dynamic segments are not filled\n */\nexport function visitable(path) {\n  return {\n    isDescriptor: true,\n\n    value(dynamicSegmentsAndQueryParams = {}) {\n      let executionContext = getExecutionContext(this);\n\n      executionContext.run((context) => {\n        let params = assign({}, dynamicSegmentsAndQueryParams);\n        let fullPath = fillInDynamicSegments(path, params);\n\n        fullPath = appendQueryParams(fullPath, params);\n\n        context.visit(fullPath);\n      });\n\n      return this;\n    }\n  };\n}\n"}